// This file is part of Moodle - http://moodle.org/

define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {
    
    return {
        init: function(moochatid) {
            
            var conversationHistory = [];
            var messageCount = 0;
            var remainingQuestions = -1; // -1 means unlimited
            
            var messagesDiv = $('#moochat-messages-' + moochatid);
            var inputField = $('#moochat-input-' + moochatid);
            var sendButton = $('#moochat-send-' + moochatid);
            var clearButton = $('#moochat-clear-' + moochatid);
            var remainingDiv = $('#moochat-remaining-' + moochatid);
            
            // Update remaining questions display
            var updateRemaining = function(remaining) {
                if (remaining >= 0) {
                    var message = 'Questions remaining: ' + remaining;
                    remainingDiv.html('<div class="alert alert-info">' + message + '</div>');
                    remainingDiv.show();
                } else {
                    remainingDiv.hide();
                }
            };
            
            // Send message
            var sendMessage = function() {
                var message = inputField.val().trim();
                
                if (message === '') {
                    return;
                }
                
                // Disable input while processing
                inputField.prop('disabled', true);
                sendButton.prop('disabled', true);
                
                // Add user message to display
                addMessage('user', message);
                
                // Add to history
                conversationHistory.push({
                    role: 'user',
                    content: message
                });
                
                // Clear input
                inputField.val('');
                
                // Show thinking indicator
                var thinkingId = 'thinking-' + Date.now();
                messagesDiv.append(
                    '<div class="moochat-message moochat-assistant" id="' + thinkingId + '">' +
                    '<em>Thinking...</em></div>'
                );
                scrollToBottom();
                
                // Call API
                $.ajax({
                    url: M.cfg.wwwroot + '/mod/moochat/chat_service.php',
                    method: 'POST',
                    data: {
                        moochatid: moochatid,
                        message: message,
                        history: JSON.stringify(conversationHistory),
                        sesskey: M.cfg.sesskey
                    },
                    dataType: 'json',
                    success: function(response) {
                        // Remove thinking indicator
                        $('#' + thinkingId).remove();
                        
                        if (response.error) {
                            // Check if this is a rate limit error
                            if (response.remaining !== undefined && response.remaining === 0) {
                                Notification.alert('Rate Limit Reached', response.error, 'OK');
                                inputField.prop('disabled', true);
                                sendButton.prop('disabled', true);
                                updateRemaining(0);
                            } else {
                                Notification.alert('Error', response.error, 'OK');
                            }
                        } else if (response.success && response.reply) {
                            // Add assistant reply
                            addMessage('assistant', response.reply);
                            
                            // Add to history
                            conversationHistory.push({
                                role: 'assistant',
                                content: response.reply
                            });
                            
                            messageCount++;
                            
                            // Update remaining questions
                            if (response.remaining !== undefined) {
                                remainingQuestions = response.remaining;
                                updateRemaining(remainingQuestions);
                                
                                // Disable if no questions left
                                if (remainingQuestions === 0) {
                                    inputField.prop('disabled', true);
                                    sendButton.prop('disabled', true);
                                }
                            }
                        }
                        
                        // Re-enable input (unless disabled by rate limit)
                        if (remainingQuestions !== 0) {
                            inputField.prop('disabled', false);
                            sendButton.prop('disabled', false);
                            inputField.focus();
                        }
                    },
                    error: function() {
                        $('#' + thinkingId).remove();
                        Notification.alert('Error', 'Failed to connect to AI service', 'OK');
                        inputField.prop('disabled', false);
                        sendButton.prop('disabled', false);
                    }
                });
            };
            
            // Add message to display
	var addMessage = function(role, content) {
	    var messageClass = role === 'user' ? 'moochat-user' : 'moochat-assistant';
	    var formattedContent = formatMessage(content);
	    var messageHtml = '<div class="moochat-message ' + messageClass + '">' +
			     formattedContent + '</div>';
	    messagesDiv.append(messageHtml);
	    scrollToBottom();
	};

	// Format message content with line breaks and basic formatting
	var formatMessage = function(text) {
	    // Escape HTML first
	    var escaped = escapeHtml(text);
	    
	    // Only format if it's a longer response (more than 100 chars or has multiple sentences)
	    var sentenceCount = (text.match(/[.!?]+/g) || []).length;
	    
	    if (text.length < 100 && sentenceCount <= 2) {
		// Short response - return as-is
		return escaped;
	    }
	    
	    // Convert double line breaks to paragraphs
	    escaped = escaped.replace(/\n\n+/g, '</p><p>');
	    
	    // Convert single line breaks to <br>
	    escaped = escaped.replace(/\n/g, '<br>');
	    
	    // Wrap in paragraph tags
	    escaped = '<p>' + escaped + '</p>';
	    
	    // Handle numbered lists (1. 2. 3.)
	    escaped = escaped.replace(/(\d+)\.\s/g, '<br><strong>$1.</strong> ');
	    
	    // Handle bullet points (- or *)
	    escaped = escaped.replace(/[-*]\s/g, '<br>â€¢ ');
	    
	    return escaped;
	};
            
            // Scroll to bottom of messages
            var scrollToBottom = function() {
                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);
            };
            
            // Escape HTML
            var escapeHtml = function(text) {
                var div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            };
            
            // Clear chat (visual only - doesn't reset server counter)
            var clearChat = function() {
                conversationHistory = [];
                messageCount = 0;
                messagesDiv.html('<p class="moochat-welcome">Chat cleared. Start a new conversation!</p>');
                inputField.val('').focus();
                // Note: remaining questions counter stays the same
            };
            
            // Event handlers
            sendButton.on('click', sendMessage);
            
            inputField.on('keypress', function(e) {
                if (e.which === 13 && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            clearButton.on('click', function() {
                if (confirm('Clear all messages? (Your question limit will not reset)')) {
                    clearChat();
                }
            });
            
            // Focus input on load
            inputField.focus();
        }
    };
});
